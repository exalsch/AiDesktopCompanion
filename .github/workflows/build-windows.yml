name: Build Windows Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-windows:
    name: Build Windows installer
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        variant: [local-stt, default]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'app/package-lock.json'

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Cache Rust (Cargo + target)
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            app/src-tauri
          cache-on-failure: true

      - name: Install WiX Toolset (for MSI bundling)
        run: choco install wixtoolset -y --no-progress

      # Local STT (Whisper) requires LLVM/Clang for bindgen on Windows. Install only for that variant.
      - name: Install LLVM (libclang) for local-stt
        if: matrix.variant == 'local-stt'
        shell: pwsh
        run: |
          choco install llvm -y --no-progress
          echo "LIBCLANG_PATH=C:\\Program Files\\LLVM\\bin" | Out-File -FilePath $env:GITHUB_ENV -Append
      # (Optional) CMake is commonly needed for audio dependencies; add if missing on the runner.
      - name: Ensure CMake (for local-stt)
        if: matrix.variant == 'local-stt'
        run: choco install cmake -y --no-progress

      # - name: Import Windows code signing cert (optional)
      #   if: ${{ secrets.WINDOWS_CERT_PFX_BASE64 != '' && secrets.WINDOWS_CERT_PASSWORD != '' }}
      #   shell: pwsh
      #   run: |
      #     $certPath = "$env:RUNNER_TEMP\\codesign.pfx"
      #     [IO.File]::WriteAllBytes($certPath, [Convert]::FromBase64String($env:WINDOWS_CERT_PFX_BASE64))
      #     echo "CERT_PATH=$certPath" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Install frontend dependencies
        working-directory: app
        run: npm install

      - name: Build Tauri app (Windows release)
        if: matrix.variant == 'default'
        working-directory: app
        run: npm run tauri build

      - name: Build Tauri app (Windows release, local-stt)
        if: matrix.variant == 'local-stt'
        working-directory: app
        run: npm run tauri -- build --features local-stt

      # - name: Code-sign Windows artifacts (optional)
      #   if: env.CERT_PATH != ''
      #   shell: pwsh
      #   run: |
      #     $signtool = (Get-Command signtool.exe -ErrorAction SilentlyContinue).Source
      #     if (-not $signtool) { throw "signtool.exe not found on PATH. Ensure Windows SDK is installed." }
      #     $timestamp = if ('${{ secrets.WINDOWS_TIMESTAMP_URL }}') { '${{ secrets.WINDOWS_TIMESTAMP_URL }}' } else { 'http://timestamp.digicert.com' }
      #     $bundleRoot = "app\src-tauri\target"
      #     $files = Get-ChildItem $bundleRoot -Include *.exe,*.msi -Recurse -File
      #     if ($files.Count -eq 0) { Write-Host "No signable artifacts found under $bundleRoot." }
      #     foreach ($f in $files) {
      #       & $signtool sign /f $env:CERT_PATH /p "${{ secrets.WINDOWS_CERT_PASSWORD }}" /fd SHA256 /td SHA256 /tr $timestamp "$($f.FullName)"
      #     }

      - name: Upload Windows bundle artifacts
        uses: actions/upload-artifact@v4
        with:
          name: AiDesktopCompanion-windows-${{ matrix.variant }}
          path: |
            app/src-tauri/target/release/bundle/**
            app/src-tauri/target/*/release/bundle/**
          if-no-files-found: error
          retention-days: 7
